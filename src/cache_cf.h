/*
 * Copyright (C) 1996-2025 The Squid Software Foundation and contributors
 *
 * Squid software is distributed under GPLv2+ license and includes
 * contributions from numerous individuals and organizations.
 * Please see the COPYING and CONTRIBUTORS files for details.
 */

/* DEBUG: section 03    Configuration File Parsing */

#ifndef SQUID_SRC_CACHE_CF_H
#define SQUID_SRC_CACHE_CF_H

#include "configuration/forward.h"
#include "sbuf/forward.h"

class wordlist;

void configFreeMemory(void);
void self_destruct(void);
void add_http_port(char *portspec);

/* extra functions from cache_cf.c useful for lib modules */
void parse_int(int *var);
void parse_onoff(int *var);
void parse_eol(char *volatile *var);
void parse_wordlist(wordlist ** list);
void requirePathnameExists(const char *name, const char *path);
void parse_time_t(time_t * var);
/// Parse bytes number from a string
void parseBytesOptionValue(size_t * bptr, const char *units, char const * value);

namespace Configuration {

/// Preprocesses squid.conf or equivalent configuration.
/// Does not change current Squid configuration.
/// \returns true if this reconfiguration attempt should be honored
/// \sa FinishReconfiguration()
bool StartReconfiguration();

/// Completes reconfiguration steps triggered by true StartReconfiguration() result.
void FinishReconfiguration();

/// Resets configuration input location in preparation for processing described
/// configuration generated by Squid. \sa SwitchTo()
void SwitchToGeneratedInput(const SBuf &description);

/// Resets configuration input location to the beginning of the named
/// configuration file or the beginning of output produced by the given command.
void SwitchToExternalInput(const char * const filenameOrCommand, const bool isCommand);

/// Resets configuration input location to the given one. During preprocessing
/// stages, when a Location object is not yet available, use
/// SwitchToGeneratedInput() and SwitchToExternalInput() wrappers instead.
void SwitchTo(const Location &);

/// Interprets the given preprocessed directive. Generated by cf_gen.cc.
void parseDirective(const PreprocessedDirective &);

/// Performs smooth reconfiguration of the given preprocessed directive.
/// Defined in cf_parser.cci generated by cf_gen.cc.
void ReconfigureSmoothly(const PreprocessedDirective &);

/// ReconfigureSmoothly() helper that gives every pliable directive type a
/// chance to prep for upcoming directive-specific ReconfigureSmoothly() calls.
/// Calls Component<T>::StartSmoothReconfiguration() for every pliable T.
/// Defined in cf_parser.cci generated by cf_gen.cc.
void StartSmoothReconfigurationOfComponents(const PreprocessedCfg &freshCfg);

/// ReconfigureSmoothly() helper that gives every pliable directive type a
/// chance to handle the end of directive-specific ReconfigureSmoothly() calls.
/// Calls Component<T>::FinishSmoothReconfiguration() for every pliable T.
/// Defined in cf_parser.cci generated by cf_gen.cc.
void FinishSmoothReconfigurationOfComponents(const PreprocessedCfg &freshCfg);

/// Converts a given on/off keyword into a C++ boolean. An absent/nil input and
/// an unexpected/unsupported input sequence are all treated as parsing errors.
bool parseOnOff(const SBuf &);

} // namespace Configuration

/// During parsing, the name of the current squid.conf directive being parsed.
extern const char *cfg_directive;
extern SBuf cfg_filename;
extern int config_lineno;
extern char config_input_line[BUFSIZ];

#endif /* SQUID_SRC_CACHE_CF_H */

